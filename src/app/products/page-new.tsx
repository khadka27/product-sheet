"use client";import { useState, useEffect, useCallback, useMemo } from "react";import { useToast } from "@/components/ui/Toast";// Define the Product interface based on your new Google Sheets columnsinterface Product {  id: string;  sn: number;  articleTitleName: string;  postedBy: string;  status: string;  contentDoc: string;  datePosted: string;  url: string;  websiteAffiliateLink: string;  referenceLink: string;  createdAt: Date;  updatedAt: Date;}// Search filters interfaceinterface SearchFilters {  articleTitleName: string;  postedBy: string;  status: string;  contentDoc: string;  url: string;}// Enhanced search utilitiesconst normalizeSearchText = (text: string): string => {  return text    .toLowerCase()    .replace(/[^a-z0-9]/g, "") // Remove all non-alphanumeric characters    .trim();};// Calculate Levenshtein distance for fuzzy matchingconst levenshteinDistance = (str1: string, str2: string): number => {  const matrix = [];  for (let i = 0; i <= str2.length; i++) {    matrix[i] = [i];  }  for (let j = 0; j <= str1.length; j++) {    matrix[0][j] = j;  }  for (let i = 1; i <= str2.length; i++) {    for (let j = 1; j <= str1.length; j++) {      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {        matrix[i][j] = matrix[i - 1][j - 1];      } else {        matrix[i][j] = Math.min(          matrix[i - 1][j - 1] + 1, // substitution          matrix[i][j - 1] + 1, // insertion          matrix[i - 1][j] + 1 // deletion        );      }    }  }  return matrix[str2.length][str1.length];};// Calculate similarity percentageconst calculateSimilarity = (str1: string, str2: string): number => {  const normalizedStr1 = normalizeSearchText(str1);  const normalizedStr2 = normalizeSearchText(str2);  if (normalizedStr1 === normalizedStr2) return 100;  if (normalizedStr1.length === 0 || normalizedStr2.length === 0) return 0;  const maxLength = Math.max(normalizedStr1.length, normalizedStr2.length);  const distance = levenshteinDistance(normalizedStr1, normalizedStr2);  return Math.round(((maxLength - distance) / maxLength) * 100);};// Check if product matches search term with percentageconst isProductMatch = (product: Product, searchTerm: string): { matches: boolean; percentage: number } => {  if (!searchTerm.trim()) return { matches: true, percentage: 100 };  const fieldsToSearch = [    product.articleTitleName,    product.postedBy,    product.status,    product.contentDoc,    product.url,    product.websiteAffiliateLink,    product.referenceLink  ];  let maxPercentage = 0;  for (const field of fieldsToSearch) {    if (field) {      const percentage = calculateSimilarity(field, searchTerm);      maxPercentage = Math.max(maxPercentage, percentage);    }  }  return { matches: maxPercentage >= 70, percentage: maxPercentage };};// Check for duplicatesconst checkDuplicates = (products: Product[], currentProduct: Product): boolean => {  return products.some(product =>     product.id !== currentProduct.id &&    product.articleTitleName.toLowerCase().trim() === currentProduct.articleTitleName.toLowerCase().trim() &&    product.articleTitleName.trim() !== ""  );};export default function ProductsPage() {  const [products, setProducts] = useState<Product[]>([]);  const [loading, setLoading] = useState(true);  const [error, setError] = useState<string | null>(null);  const [editingCell, setEditingCell] = useState<{ rowId: string; field: keyof Product } | null>(null);  const [globalSearch, setGlobalSearch] = useState("");  const [selectedPercentage, setSelectedPercentage] = useState<number>(100);  const [duplicateAnalysis, setDuplicateAnalysis] = useState<{ [key: string]: boolean }>({});  // Search state  const [searchFilters, setSearchFilters] = useState<SearchFilters>({    articleTitleName: "",    postedBy: "",    status: "",    contentDoc: "",    url: "",  });  // State for new product entry  const [newProduct, setNewProduct] = useState<Partial<Product>>({});  const [nextSN, setNextSN] = useState<number>(1);  // Unique values for filter dropdowns  const uniqueValues = useMemo(() => {    const values = {      statuses: new Set<string>(),      postedBy: new Set<string>(),      contentDocs: new Set<string>(),    };    products.forEach((product) => {      if (product.status) values.statuses.add(product.status);      if (product.postedBy) values.postedBy.add(product.postedBy);      if (product.contentDoc) values.contentDocs.add(product.contentDoc);    });    return {      statuses: Array.from(values.statuses).sort(),      postedBy: Array.from(values.postedBy).sort(),      contentDocs: Array.from(values.contentDocs).sort(),    };  }, [products]);  // Filter products based on search criteria  const filteredProducts = useMemo(() => {    let filtered = products;    // Apply global search with percentage matching    if (globalSearch.trim()) {      filtered = filtered.filter(product => {        const { matches, percentage } = isProductMatch(product, globalSearch);        return matches && percentage >= selectedPercentage;      });    }    // Apply specific field filters    filtered = filtered.filter(product => {      return Object.entries(searchFilters).every(([key, value]) => {        if (!value.trim()) return true;        const productValue = product[key as keyof Product];        if (typeof productValue === 'string') {          return productValue.toLowerCase().includes(value.toLowerCase());        }        return true;      });    });    return filtered;  }, [products, globalSearch, selectedPercentage, searchFilters]);  const { toast } = useToast();  // Fetch products from API  const fetchProducts = useCallback(async () => {    try {      setLoading(true);      setError(null);      const response = await fetch("/api/products");            if (!response.ok) {        const errorData = await response.json();        throw new Error(errorData.error || `Failed to fetch products: ${response.status}`);      }            const data = await response.json();      setProducts(data);            // Calculate next S.N.      const maxSN = data.length > 0 ? Math.max(...data.map((p: Product) => p.sn || 0)) : 0;      setNextSN(maxSN + 1);      // Analyze duplicates      const duplicates: { [key: string]: boolean } = {};      data.forEach((product: Product) => {        duplicates[product.id] = checkDuplicates(data, product);      });      setDuplicateAnalysis(duplicates);    } catch (error) {      console.error("Error fetching products:", error);      setError(error instanceof Error ? error.message : "Failed to fetch products");      toast({        title: "Error",        description: error instanceof Error ? error.message : "Failed to fetch products",        variant: "destructive",      });    } finally {      setLoading(false);    }  }, [toast]);  useEffect(() => {    fetchProducts();  }, [fetchProducts]);  // Get row styling based on duplicate status and search match  const getRowStyling = (product: Product) => {    const isDuplicate = duplicateAnalysis[product.id];    const { percentage } = isProductMatch(product, globalSearch);        let backgroundColor = 'bg-white';        if (globalSearch.trim()) {      if (percentage >= 100) backgroundColor = 'bg-green-50';      else if (percentage >= 90) backgroundColor = 'bg-blue-50';      else if (percentage >= 80) backgroundColor = 'bg-yellow-50';      else if (percentage >= 70) backgroundColor = 'bg-orange-50';    }        if (isDuplicate) {      backgroundColor = 'bg-red-50 border-l-4 border-red-400';    } else if (!isDuplicate && product.articleTitleName.trim()) {      backgroundColor = backgroundColor === 'bg-white' ? 'bg-green-50' : backgroundColor;    }    return backgroundColor;  };  // Handle cell editing  const handleCellEdit = async (productId: string, field: keyof Product, value: string | number) => {    try {      const product = products.find(p => p.id === productId);      if (!product) return;      const updatedProduct = { ...product, [field]: value };            const response = await fetch("/api/products", {        method: "PUT",        headers: { "Content-Type": "application/json" },        body: JSON.stringify(updatedProduct),      });      if (!response.ok) {        const errorData = await response.json();        throw new Error(errorData.error || "Failed to update product");      }      // Update local state      setProducts(prev =>        prev.map(p => p.id === productId ? updatedProduct : p)      );      // Update duplicate analysis      const updatedProducts = products.map(p => p.id === productId ? updatedProduct : p);      const duplicates: { [key: string]: boolean } = {};      updatedProducts.forEach((prod) => {        duplicates[prod.id] = checkDuplicates(updatedProducts, prod);      });      setDuplicateAnalysis(duplicates);      toast({        title: "Success",        description: "Product updated successfully",      });    } catch (error) {      console.error("Error updating product:", error);      toast({        title: "Error",        description: error instanceof Error ? error.message : "Failed to update product",        variant: "destructive",      });    }  };  // Handle adding new product  const handleAddProduct = async () => {    try {      if (!newProduct.articleTitleName?.trim()) {        toast({          title: "Error",          description: "Article Title Name is required",          variant: "destructive",        });        return;      }      const productToAdd = {        ...newProduct,        sn: nextSN,        datePosted: newProduct.datePosted || new Date().toLocaleDateString(),      };      const response = await fetch("/api/products", {        method: "POST",        headers: { "Content-Type": "application/json" },        body: JSON.stringify(productToAdd),      });      if (!response.ok) {        const errorData = await response.json();        throw new Error(errorData.error || "Failed to add product");      }      // Refresh data      await fetchProducts();            // Reset form      setNewProduct({});      setNextSN(prev => prev + 1);      toast({        title: "Success",        description: "Product added successfully",      });    } catch (error) {      console.error("Error adding product:", error);      toast({        title: "Error",        description: error instanceof Error ? error.message : "Failed to add product",        variant: "destructive",      });    }  };  // Add 10 empty rows  const emptyRows = Array.from({ length: 10 }, (_, index) => ({    id: `empty_${index}`,    sn: 0,    articleTitleName: "",    postedBy: "",    status: "",    contentDoc: "",    datePosted: "",    url: "",    websiteAffiliateLink: "",    referenceLink: "",    createdAt: new Date(),    updatedAt: new Date(),  }));  const allRowsToDisplay = [...filteredProducts, ...emptyRows];  if (loading) return <div className="p-4">Loading products...</div>;  if (error) return <div className="p-4 text-red-600">Error: {error}</div>;  return (    <div className="p-4 space-y-4">      <h1 className="text-2xl font-bold">Product Management</h1>            {/* Search and Filter Controls */}      <div className="bg-gray-50 p-4 rounded-lg space-y-4">        <div className="flex gap-4 items-center">          <div className="flex-1">            <input              type="text"              placeholder="Global search across all fields..."              value={globalSearch}              onChange={(e) => setGlobalSearch(e.target.value)}              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"            />          </div>          <select            value={selectedPercentage}            onChange={(e) => setSelectedPercentage(Number(e.target.value))}            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"          >            <option value={100}>100% Match</option>            <option value={90}>90%+ Match</option>            <option value={80}>80%+ Match</option>            <option value={70}>70%+ Match</option>          </select>        </div>        {/* Field-specific filters */}        <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">          <input            type="text"            placeholder="Filter by Title..."            value={searchFilters.articleTitleName}            onChange={(e) => setSearchFilters(prev => ({ ...prev, articleTitleName: e.target.value }))}            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"          />                    <select            value={searchFilters.postedBy}            onChange={(e) => setSearchFilters(prev => ({ ...prev, postedBy: e.target.value }))}            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"          >            <option value="">All Posted By</option>            {uniqueValues.postedBy.map(value => (              <option key={value} value={value}>{value}</option>            ))}          </select>          <select            value={searchFilters.status}            onChange={(e) => setSearchFilters(prev => ({ ...prev, status: e.target.value }))}            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"          >            <option value="">All Statuses</option>            {uniqueValues.statuses.map(value => (              <option key={value} value={value}>{value}</option>            ))}          </select>          <select            value={searchFilters.contentDoc}            onChange={(e) => setSearchFilters(prev => ({ ...prev, contentDoc: e.target.value }))}            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"          >            <option value="">All Content Docs</option>            {uniqueValues.contentDocs.map(value => (              <option key={value} value={value}>{value}</option>            ))}          </select>          <input            type="text"            placeholder="Filter by URL..."            value={searchFilters.url}            onChange={(e) => setSearchFilters(prev => ({ ...prev, url: e.target.value }))}            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"          />        </div>      </div>      {/* Results Summary */}      <div className="flex justify-between items-center">        <p className="text-gray-600">          Showing {filteredProducts.length} of {products.length} products          {globalSearch && ` (${selectedPercentage}%+ match for "${globalSearch}")`}        </p>        <div className="flex gap-2 text-sm">          <span className="px-2 py-1 bg-green-100 text-green-800 rounded">Unique</span>          <span className="px-2 py-1 bg-red-100 text-red-800 rounded">Duplicate</span>          <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded">90%+ Match</span>          <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded">80%+ Match</span>          <span className="px-2 py-1 bg-orange-100 text-orange-800 rounded">70%+ Match</span>        </div>      </div>      {/* Table with horizontal scroll */}      <div className="overflow-x-auto border border-gray-200 rounded-lg">        <table className="min-w-full bg-white">          <thead className="bg-gray-50 sticky top-0">            <tr>              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[80px]">S.N.</th>              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[300px]">Article Title Name</th>              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[150px]">Posted By</th>              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[120px]">Status</th>              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[150px]">Content Doc</th>              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[120px]">Date Posted</th>              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[200px]">URL</th>              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[200px]">Website Affiliate Link</th>              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[200px]">Reference Link</th>              {globalSearch && <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[100px]">Match %</th>}            </tr>          </thead>          <tbody className="bg-white divide-y divide-gray-200">            {allRowsToDisplay.map((product, index) => {              const isDuplicate = duplicateAnalysis[product.id];              const { percentage } = isProductMatch(product, globalSearch);                            return (                <tr key={product.id} className={getRowStyling(product)}>                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">                    {product.sn || filteredProducts.length + index + 1}                  </td>                                    <td className="px-4 py-3 text-sm text-gray-900">                    {editingCell?.rowId === product.id && editingCell?.field === 'articleTitleName' ? (                      <input                        type="text"                        value={product.articleTitleName}                        onChange={(e) => {                          const updatedProducts = allRowsToDisplay.map(p =>                            p.id === product.id ? { ...p, articleTitleName: e.target.value } : p                          );                          if (product.id.startsWith('empty_')) {                            const emptyIndex = parseInt(product.id.split('_')[1]);                            emptyRows[emptyIndex] = { ...emptyRows[emptyIndex], articleTitleName: e.target.value };                          }                        }}                        onBlur={() => {                          setEditingCell(null);                          if (product.articleTitleName.trim() && !product.id.startsWith('empty_')) {                            handleCellEdit(product.id, 'articleTitleName', product.articleTitleName);                          }                        }}                        onKeyDown={(e) => {                          if (e.key === 'Enter') {                            setEditingCell(null);                            if (product.articleTitleName.trim() && !product.id.startsWith('empty_')) {                              handleCellEdit(product.id, 'articleTitleName', product.articleTitleName);                            }                          }                        }}                        className="w-full px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"                        autoFocus                      />                    ) : (                      <div                        onClick={() => setEditingCell({ rowId: product.id, field: 'articleTitleName' })}                        className="cursor-pointer hover:bg-gray-100 px-2 py-1 rounded min-h-[24px] w-full break-words"                      >                        {product.articleTitleName || (                          <span className="text-gray-400 italic">Click to add article title...</span>                        )}                      </div>                    )}                  </td>                  <td className="px-4 py-3 text-sm text-gray-900">                    {editingCell?.rowId === product.id && editingCell?.field === 'postedBy' ? (                      <input                        type="text"                        value={product.postedBy}                        onChange={(e) => {                          if (product.id.startsWith('empty_')) {                            const emptyIndex = parseInt(product.id.split('_')[1]);                            emptyRows[emptyIndex] = { ...emptyRows[emptyIndex], postedBy: e.target.value };                          }                        }}                        onBlur={() => {                          setEditingCell(null);                          if (!product.id.startsWith('empty_')) {                            handleCellEdit(product.id, 'postedBy', product.postedBy);                          }                        }}                        onKeyDown={(e) => {                          if (e.key === 'Enter') {                            setEditingCell(null);                            if (!product.id.startsWith('empty_')) {                              handleCellEdit(product.id, 'postedBy', product.postedBy);                            }                          }                        }}                        className="w-full px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"                        autoFocus                      />                    ) : (                      <div                        onClick={() => setEditingCell({ rowId: product.id, field: 'postedBy' })}                        className="cursor-pointer hover:bg-gray-100 px-2 py-1 rounded min-h-[24px]"                      >                        {product.postedBy || (                          <span className="text-gray-400 italic">Click to add...</span>                        )}                      </div>                    )}                  </td>                  <td className="px-4 py-3 text-sm text-gray-900">                    {editingCell?.rowId === product.id && editingCell?.field === 'status' ? (                      <select                        value={product.status}                        onChange={(e) => {                          if (product.id.startsWith('empty_')) {                            const emptyIndex = parseInt(product.id.split('_')[1]);                            emptyRows[emptyIndex] = { ...emptyRows[emptyIndex], status: e.target.value };                          }                        }}                        onBlur={() => {                          setEditingCell(null);                          if (!product.id.startsWith('empty_')) {                            handleCellEdit(product.id, 'status', product.status);                          }                        }}                        className="w-full px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"                        autoFocus                      >                        <option value="">Select status...</option>                        <option value="Draft">Draft</option>                        <option value="Published">Published</option>                        <option value="Under Review">Under Review</option>                        <option value="Archived">Archived</option>                      </select>                    ) : (                      <div                        onClick={() => setEditingCell({ rowId: product.id, field: 'status' })}                        className="cursor-pointer hover:bg-gray-100 px-2 py-1 rounded min-h-[24px]"                      >                        {product.status || (                          <span className="text-gray-400 italic">Click to select...</span>                        )}                      </div>                    )}                  </td>                  <td className="px-4 py-3 text-sm text-gray-900">                    {editingCell?.rowId === product.id && editingCell?.field === 'contentDoc' ? (                      <input                        type="text"                        value={product.contentDoc}                        onChange={(e) => {                          if (product.id.startsWith('empty_')) {                            const emptyIndex = parseInt(product.id.split('_')[1]);                            emptyRows[emptyIndex] = { ...emptyRows[emptyIndex], contentDoc: e.target.value };                          }                        }}                        onBlur={() => {                          setEditingCell(null);                          if (!product.id.startsWith('empty_')) {                            handleCellEdit(product.id, 'contentDoc', product.contentDoc);                          }                        }}                        onKeyDown={(e) => {                          if (e.key === 'Enter') {                            setEditingCell(null);                            if (!product.id.startsWith('empty_')) {                              handleCellEdit(product.id, 'contentDoc', product.contentDoc);                            }                          }                        }}                        className="w-full px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"                        autoFocus                      />                    ) : (                      <div                        onClick={() => setEditingCell({ rowId: product.id, field: 'contentDoc' })}                        className="cursor-pointer hover:bg-gray-100 px-2 py-1 rounded min-h-[24px]"                      >                        {product.contentDoc || (                          <span className="text-gray-400 italic">Click to add...</span>                        )}                      </div>                    )}                  </td>                  <td className="px-4 py-3 text-sm text-gray-900">                    {editingCell?.rowId === product.id && editingCell?.field === 'datePosted' ? (                      <input                        type="date"                        value={product.datePosted}                        onChange={(e) => {                          if (product.id.startsWith('empty_')) {                            const emptyIndex = parseInt(product.id.split('_')[1]);                            emptyRows[emptyIndex] = { ...emptyRows[emptyIndex], datePosted: e.target.value };                          }                        }}                        onBlur={() => {                          setEditingCell(null);                          if (!product.id.startsWith('empty_')) {                            handleCellEdit(product.id, 'datePosted', product.datePosted);                          }                        }}                        className="w-full px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"                        autoFocus                      />                    ) : (                      <div                        onClick={() => setEditingCell({ rowId: product.id, field: 'datePosted' })}                        className="cursor-pointer hover:bg-gray-100 px-2 py-1 rounded min-h-[24px]"                      >                        {product.datePosted || (                          <span className="text-gray-400 italic">Click to add...</span>                        )}                      </div>                    )}                  </td>                  <td className="px-4 py-3 text-sm text-gray-900">                    {editingCell?.rowId === product.id && editingCell?.field === 'url' ? (                      <input                        type="url"                        value={product.url}                        onChange={(e) => {                          if (product.id.startsWith('empty_')) {                            const emptyIndex = parseInt(product.id.split('_')[1]);                            emptyRows[emptyIndex] = { ...emptyRows[emptyIndex], url: e.target.value };                          }                        }}                        onBlur={() => {                          setEditingCell(null);                          if (!product.id.startsWith('empty_')) {                            handleCellEdit(product.id, 'url', product.url);                          }                        }}                        onKeyDown={(e) => {                          if (e.key === 'Enter') {                            setEditingCell(null);                            if (!product.id.startsWith('empty_')) {                              handleCellEdit(product.id, 'url', product.url);                            }                          }                        }}                        className="w-full px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"                        autoFocus                      />
                    ) : (
                      <div
                        onClick={() => setEditingCell({ rowId: product.id, field: 'url' })}
                        className="cursor-pointer hover:bg-gray-100 px-2 py-1 rounded min-h-[24px] break-all"
                      >
                        {product.url ? (
                          <a href={product.url} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                            {product.url}
                          </a>
                        ) : (
                          <span className="text-gray-400 italic">Click to add URL...</span>
                        )}
                      </div>
                    )}
                  </td>

                  <td className="px-4 py-3 text-sm text-gray-900">
                    {editingCell?.rowId === product.id && editingCell?.field === 'websiteAffiliateLink' ? (
                      <input
                        type="url"
                        value={product.websiteAffiliateLink}
                        onChange={(e) => {
                          if (product.id.startsWith('empty_')) {
                            const emptyIndex = parseInt(product.id.split('_')[1]);
                            emptyRows[emptyIndex] = { ...emptyRows[emptyIndex], websiteAffiliateLink: e.target.value };
                          }
                        }}
                        onBlur={() => {
                          setEditingCell(null);
                          if (!product.id.startsWith('empty_')) {
                            handleCellEdit(product.id, 'websiteAffiliateLink', product.websiteAffiliateLink);
                          }
                        }}
                        onKeyDown={(e) => {
                          if (e.key === 'Enter') {
                            setEditingCell(null);
                            if (!product.id.startsWith('empty_')) {
                              handleCellEdit(product.id, 'websiteAffiliateLink', product.websiteAffiliateLink);
                            }
                          }
                        }}
                        className="w-full px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                        autoFocus
                      />
                    ) : (
                      <div
                        onClick={() => setEditingCell({ rowId: product.id, field: 'websiteAffiliateLink' })}
                        className="cursor-pointer hover:bg-gray-100 px-2 py-1 rounded min-h-[24px] break-all"
                      >
                        {product.websiteAffiliateLink ? (
                          <a href={product.websiteAffiliateLink} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                            {product.websiteAffiliateLink}
                          </a>
                        ) : (
                          <span className="text-gray-400 italic">Click to add affiliate link...</span>
                        )}
                      </div>
                    )}
                  </td>

                  <td className="px-4 py-3 text-sm text-gray-900">
                    {editingCell?.rowId === product.id && editingCell?.field === 'referenceLink' ? (
                      <input
                        type="url"
                        value={product.referenceLink}
                        onChange={(e) => {
                          if (product.id.startsWith('empty_')) {
                            const emptyIndex = parseInt(product.id.split('_')[1]);
                            emptyRows[emptyIndex] = { ...emptyRows[emptyIndex], referenceLink: e.target.value };
                          }
                        }}
                        onBlur={() => {
                          setEditingCell(null);
                          if (!product.id.startsWith('empty_')) {
                            handleCellEdit(product.id, 'referenceLink', product.referenceLink);
                          }
                        }}
                        onKeyDown={(e) => {
                          if (e.key === 'Enter') {
                            setEditingCell(null);
                            if (!product.id.startsWith('empty_')) {
                              handleCellEdit(product.id, 'referenceLink', product.referenceLink);
                            }
                          }
                        }}
                        className="w-full px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                        autoFocus
                      />
                    ) : (
                      <div
                        onClick={() => setEditingCell({ rowId: product.id, field: 'referenceLink' })}
                        className="cursor-pointer hover:bg-gray-100 px-2 py-1 rounded min-h-[24px] break-all"
                      >
                        {product.referenceLink ? (
                          <a href={product.referenceLink} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                            {product.referenceLink}
                          </a>
                        ) : (
                          <span className="text-gray-400 italic">Click to add reference link...</span>
                        )}
                      </div>
                    )}
                  </td>

                  {globalSearch && (
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">
                      {globalSearch.trim() ? (
                        <span className={`px-2 py-1 rounded text-xs font-medium ${
                          percentage >= 100 ? 'bg-green-100 text-green-800' :
                          percentage >= 90 ? 'bg-blue-100 text-blue-800' :
                          percentage >= 80 ? 'bg-yellow-100 text-yellow-800' :
                          percentage >= 70 ? 'bg-orange-100 text-orange-800' : 'bg-gray-100 text-gray-800'
                        }`}>
                          {percentage}%
                        </span>
                      ) : '-'}
                    </td>
                  )}
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );
}
