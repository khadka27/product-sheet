// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  CONTRIBUTOR
  VIEWER
}

enum ProductStatus {
  ACTIVE
  ARCHIVED
  DRAFT
}

enum ImportJobStatus {
  PENDING
  VALIDATING
  MERGED
  FAILED
}

model User {
  id           String   @id @default(cuid())
  name         String?
  email        String   @unique
  passwordHash String?
  role         UserRole @default(VIEWER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  createdProducts Product[]
  importJobs      ImportJob[]
  auditLogs       AuditLog[]
  accounts        Account[]
  sessions        Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Brand {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())

  // Relations
  products Product[]

  @@map("brands")
}

model Category {
  id       String  @id @default(cuid())
  name     String  @unique
  parentId String?
  createdAt DateTime @default(now())

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id           String        @id @default(cuid())
  name         String
  sku          String        @unique
  brandId      String
  categoryId   String
  barcode      String?
  price        Decimal       @db.Decimal(10, 2)
  currency     String        @default("USD")
  quantity     Int           @default(0)
  status       ProductStatus @default(DRAFT)
  images       String[]      @default([])
  tags         String[]      @default([])
  description  String?       @db.Text
  createdById  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Full-text search vector
  searchVector Unsupported("tsvector")?

  // Relations
  brand     Brand    @relation(fields: [brandId], references: [id])
  category  Category @relation(fields: [categoryId], references: [id])
  createdBy User     @relation(fields: [createdById], references: [id])

  @@index([searchVector], type: Gin)
  @@index([name], type: Gin, map: "products_name_gin_idx")
  @@index([sku], type: Gin, map: "products_sku_gin_idx")
  @@map("products")
}

model ImportJob {
  id           String          @id @default(cuid())
  uploadedById String
  status       ImportJobStatus @default(PENDING)
  summaryJson  Json?
  createdAt    DateTime        @default(now())

  // Relations
  uploadedBy User @relation(fields: [uploadedById], references: [id])

  @@map("import_jobs")
}

model AuditLog {
  id       String   @id @default(cuid())
  actorId  String
  action   String
  entity   String
  entityId String
  diffJson Json?
  createdAt DateTime @default(now())

  // Relations
  actor User @relation(fields: [actorId], references: [id])

  @@map("audit_logs")
}
